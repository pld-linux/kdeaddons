Index: kate/cppsymbolviewer/plugin_katesymbolviewer.h
===================================================================
--- kate/cppsymbolviewer/plugin_katesymbolviewer.h	(.../tags/KDE/3.4.2/kdeaddons)	(revision 442272)
+++ kate/cppsymbolviewer/plugin_katesymbolviewer.h	(.../branches/KDE/3.4/kdeaddons)	(revision 442272)
@@ -70,6 +70,7 @@
     bool listMode;
     void parseCppSymbols(void);
     void parseTclSymbols(void);
+    void parseFortranSymbols(void);
   public:
     Kate::MainWindow *win;
     bool types_on;
Index: kate/cppsymbolviewer/fortran_parser.cpp
===================================================================
--- kate/cppsymbolviewer/fortran_parser.cpp	(.../tags/KDE/3.4.2/kdeaddons)	(revision 0)
+++ kate/cppsymbolviewer/fortran_parser.cpp	(.../branches/KDE/3.4/kdeaddons)	(revision 442272)
@@ -0,0 +1,222 @@
+/***************************************************************************
+                      fortran_parser.cpp  -  description
+                             -------------------
+    begin                : jul 10 2005
+    author               : 2005 Roberto Quitiliani
+    email                : roby(dot)q(AT)tiscali(dot)it
+ ***************************************************************************/
+ /***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+ 
+#include "plugin_katesymbolviewer.h"
+
+void KatePluginSymbolViewerView::parseFortranSymbols(void)
+{
+  if (!win->viewManager()->activeView())
+   return;
+
+ QString currline;
+ QString subrStr("subroutine ");
+ QString funcStr("function ");
+ QString modStr("module ");
+
+ QString stripped="";
+ uint i;
+ int fnd,block=0,blockend=0,paro=0,parc=0;
+ bool mainprog;
+
+ QListViewItem *node = NULL;
+ QListViewItem *subrNode = NULL, *funcNode = NULL, *modNode = NULL;
+ QListViewItem *lastSubrNode = NULL, *lastFuncNode = NULL, *lastModNode = NULL;
+
+ QPixmap func( ( const char** ) class_xpm );
+ QPixmap subr( ( const char** ) macro_xpm );
+ QPixmap mod( ( const char** ) struct_xpm );
+
+ //It is necessary to change names
+ popup->changeItem( popup->idAt(2),i18n("Show Subroutines"));
+ popup->changeItem( popup->idAt(3),i18n("Show Modules"));
+ popup->changeItem( popup->idAt(4),i18n("Show Functions"));
+
+
+ if(listMode)
+  {
+   funcNode = new QListViewItem(symbols, symbols->lastItem(), i18n("Functions"));
+   subrNode = new QListViewItem(symbols, symbols->lastItem(), i18n("Subroutines"));
+   modNode = new QListViewItem(symbols, symbols->lastItem(), i18n("Modules"));
+   funcNode->setPixmap(0, (const QPixmap &)func);
+   modNode->setPixmap(0, (const QPixmap &)mod);
+   subrNode->setPixmap(0, (const QPixmap &)subr);
+   lastSubrNode = subrNode;
+   lastFuncNode = funcNode;
+   lastModNode = modNode;
+   symbols->setRootIsDecorated(1);
+  }
+ else
+   symbols->setRootIsDecorated(0);
+
+ Kate::Document *kDoc = win->viewManager()->activeView()->getDoc();
+
+ for (i = 0; i<kDoc->numLines(); i++)
+   {
+    currline = kDoc->textLine(i);
+    currline = currline.stripWhiteSpace();
+    currline = currline.simplifyWhiteSpace();
+    //Fortran is case insensitive
+    currline = currline.lower();
+    bool comment = false;
+    //kdDebug(13000)<<currline<<endl;
+    if(currline.at(0) == '!' || currline.at(0) == 'c') comment = true;
+    //block=0;
+
+    mainprog=false;
+
+    if(!comment)
+      {
+	//Subroutines
+	if(currline.startsWith(subrStr) || currline.startsWith("program "))
+	{
+		block=1;
+		stripped="";
+	}
+	//Modules
+	else if(currline.startsWith(modStr))
+	{
+		block=2;
+		stripped="";
+	}
+ 	else if(((currline.startsWith("real") || currline.startsWith("double") || currline.startsWith("integer") || currline.startsWith("character")) || currline.startsWith("logical")) && currline.find(funcStr) > 0)
+	{
+		block=3;
+		stripped="";
+	}
+	
+	//Subroutines
+	if(block==1)
+	{
+		if(currline.startsWith("program "))
+			mainprog=true;
+		if (macro_on == true) // not really a macro, but a subroutines
+		{
+			stripped += currline.right(currline.length());
+			stripped = stripped.simplifyWhiteSpace();
+			stripped.replace("*","");
+			stripped.replace("+","");
+			stripped.replace("$","");
+			if(blockend==0){
+				fnd = stripped.find(' ');
+				stripped = currline.right(currline.length()-fnd-1);
+			}
+			stripped.replace(" ","");
+			fnd = stripped.find("!");
+			if(fnd>0){
+				stripped = stripped.left(fnd);
+			}
+			paro+=currline.contains(')',FALSE);
+			parc+=currline.contains('(',FALSE);
+			
+			if((paro==parc || mainprog) && stripped.endsWith("&",FALSE)==FALSE){
+				stripped.replace("&","");
+				if(mainprog && stripped.find('(')<0 && stripped.find(')')<0)
+					stripped.prepend("Main: ");
+				if(stripped.find("=")==-1){
+					if (listMode)
+					{
+						node = new QListViewItem(subrNode, lastSubrNode, stripped);
+						lastSubrNode = node;
+					}
+					else
+						node = new QListViewItem(symbols, symbols->lastItem(), stripped);
+					node->setPixmap(0, (const QPixmap &)subr);
+					node->setText(1, QString::number( i, 10));
+				}
+				stripped="";
+				block=0;
+				blockend=0;
+				paro=0;
+				parc=0;
+			}else{
+				blockend=1;
+			}
+		}
+	}
+
+	//Modules
+	else if(block==2)
+	{
+		if (struct_on == true) // not really a struct, but a module
+		{
+			stripped = currline.right(currline.length());
+			stripped = stripped.simplifyWhiteSpace();
+			fnd = stripped.find(' ');
+			stripped = currline.right(currline.length()-fnd-1);
+			fnd = stripped.find('!');
+			if(fnd>0){
+				stripped = stripped.left(fnd);
+			}
+			if(stripped.find('=')==-1){
+				if (listMode)
+				{
+					node = new QListViewItem(modNode, lastModNode, stripped);
+					lastModNode = node;
+				}
+				else
+					node = new QListViewItem(symbols, symbols->lastItem(), stripped);
+				node->setPixmap(0, (const QPixmap &)mod);
+				node->setText(1, QString::number( i, 10));
+			}
+			stripped = "";
+		}
+		block=0;
+		blockend=0;
+	}
+
+	//Functions
+	else if(block==3)
+	{
+		if (func_on == true)
+		{
+			stripped += currline.right(currline.length());
+			stripped = stripped.stripWhiteSpace();
+			stripped.replace( "function", "" );
+			stripped.replace("*","");
+			stripped.replace("+","");
+			stripped.replace("$","");
+			stripped = stripped.simplifyWhiteSpace();
+			fnd = stripped.find('!');
+			if(fnd>0){
+				stripped = stripped.left(fnd);
+			}
+			stripped = stripped.stripWhiteSpace();
+			paro+=currline.contains(')',FALSE);
+			parc+=currline.contains('(',FALSE);
+
+			if(paro==parc && stripped.endsWith("&",FALSE)==FALSE){
+				stripped.replace("&","");
+				if (listMode)
+				{
+					node = new QListViewItem(funcNode, lastFuncNode, stripped);
+					lastFuncNode = node;
+				}
+				else
+					node = new QListViewItem(symbols, symbols->lastItem(), stripped);
+				node->setPixmap(0, (const QPixmap &)func);
+				node->setText(1, QString::number( i, 10));
+				stripped = "";
+				block=0;
+				paro=0;
+				parc=0;
+			}
+			blockend=0;
+		}
+	}
+	}
+    } //for i loop
+}
+
Index: kate/cppsymbolviewer/Makefile.am
===================================================================
--- kate/cppsymbolviewer/Makefile.am	(.../tags/KDE/3.4.2/kdeaddons)	(revision 442272)
+++ kate/cppsymbolviewer/Makefile.am	(.../branches/KDE/3.4/kdeaddons)	(revision 442272)
@@ -4,7 +4,7 @@
 # Install this plugin in the KDE modules directory
 kde_module_LTLIBRARIES = katecppsymbolviewerplugin.la
 
-katecppsymbolviewerplugin_la_SOURCES = cpp_parser.cpp tcl_parser.cpp plugin_katesymbolviewer.cpp
+katecppsymbolviewerplugin_la_SOURCES = cpp_parser.cpp tcl_parser.cpp fortran_parser.cpp plugin_katesymbolviewer.cpp
 katecppsymbolviewerplugin_la_LIBADD = -lkateinterfaces
 katecppsymbolviewerplugin_la_LDFLAGS = -module $(KDE_PLUGIN) $(all_libraries)
 
Index: kate/cppsymbolviewer/plugin_katesymbolviewer.cpp
===================================================================
--- kate/cppsymbolviewer/plugin_katesymbolviewer.cpp	(.../tags/KDE/3.4.2/kdeaddons)	(revision 442272)
+++ kate/cppsymbolviewer/plugin_katesymbolviewer.cpp	(.../branches/KDE/3.4/kdeaddons)	(revision 442272)
@@ -189,7 +189,8 @@
 void KatePluginSymbolViewerView::parseSymbols(void)
 {
   unsigned int hlMode = 0;
- 
+  QListViewItem *node = NULL;
+
   if (!win->viewManager()->activeView())
     return;
 
@@ -199,6 +200,11 @@
   if (!kv)
     return;
 
+ //It is necessary to change names
+ popup->changeItem( popup->idAt(2),i18n("Show Macros"));
+ popup->changeItem( popup->idAt(3),i18n("Show Structures"));
+ popup->changeItem( popup->idAt(4),i18n("Show Functions"));
+
   /** Get the current highlighting mode */
   hlMode = kv->hlMode();
   QString hlModeName = kv->hlModeName(hlMode);
@@ -209,6 +215,10 @@
      parseCppSymbols();
   else if (hlModeName == "Tcl/Tk")
      parseTclSymbols();
+  else if (hlModeName == "Fortran")
+     parseFortranSymbols();
+  else
+     node = new QListViewItem(symbols, symbols->lastItem(), i18n("Format not supported yet"));
 }
 
 void KatePluginSymbolViewerView::goToSymbol(QListViewItem *it)
Index: Makefile.cvs
===================================================================
--- Makefile.cvs	(.../tags/KDE/3.4.2/kdeaddons)	(revision 0)
+++ Makefile.cvs	(.../branches/KDE/3.4/kdeaddons)	(revision 442272)
@@ -0,0 +1,15 @@
+
+all: 
+	@echo "This Makefile is only for the CVS repository"
+	@echo "This will be deleted before making the distribution"
+	@echo ""
+	@if test ! -d admin; then \
+	   echo "Please recheckout this module!" ;\
+	   echo "for cvs: use checkout once and after that update again" ;\
+	   echo "for cvsup: checkout kde-common from cvsup and" ;\
+	   echo "   link kde-common/admin to ./admin" ;\
+	   exit 1 ;\
+	fi
+	$(MAKE) -f admin/Makefile.common cvs
+
+.SILENT:

Property changes on: Makefile.cvs
___________________________________________________________________
Name: svn:keywords
   + Author Date Id Revision

Index: kfile-plugins/mhtml/kfile_mhtml.cpp
===================================================================
--- kfile-plugins/mhtml/kfile_mhtml.cpp	(.../tags/KDE/3.4.2/kdeaddons)	(revision 442272)
+++ kfile-plugins/mhtml/kfile_mhtml.cpp	(.../branches/KDE/3.4/kdeaddons)	(revision 442272)
@@ -128,13 +128,13 @@
 	st=encodedText.find("=?");
 	while(st!=-1){
 		en=encodedText.find("?=");
-		while(encodedText.mid(en+2,1)!=" " && en+2<(int)encodedText.length()) en=encodedText.find("?=",en+1);
+		while(encodedText.mid(en+2,2)!="\" " && encodedText.mid(en+2,1)!=" " && en+2<(int)encodedText.length()) en=encodedText.find("?=",en+1);
 		if(en==-1) break;
 		decodedText+=encodedText.left(st);
 		QString tmp=encodedText.mid(st,en-st+2);
 		encodedText=encodedText.mid(en+2);
 		decodedText+=decodeRFC2047String(tmp);
-		st=encodedText.find("=?",st+1);
+		st=encodedText.find("=?");
 	}
 	decodedText += encodedText;
 	// remove unwanted '<' and '>'

Property changes on: .
___________________________________________________________________
Name: svn:externals
   + admin https://svn.kde.org/home/kde/branches/KDE/3.4/kde-common/admin


